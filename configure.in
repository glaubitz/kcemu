dnl ----------------------------------------------------------------
dnl  $Id: configure.in,v 1.19 2002/10/31 16:39:53 torsten_paul Exp $
dnl
dnl  Process this file with autoconf to produce a configure script.
dnl ----------------------------------------------------------------

AC_INIT(include/kc/kc.h)
AC_CONFIG_AUX_DIR(config)

AC_GNU_SOURCE
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

dnl -----------------------
dnl  declare extra options
dnl -----------------------

AC_ARG_ENABLE(sound,        [  --enable-sound          enable sound using libSDL (broken!) [default=no]],,enable_sound=no)
AC_ARG_ENABLE(libaudiofile, [  --enable-libaudiofile   enable usage of libaudiofile if present [default=yes]],,enable_libaudiofile=yes)
AC_ARG_ENABLE(libsndfile,   [  --enable-libsndfile     enable usage of libsndfile if present [default=yes]],,enable_libsndfile=yes)
AC_ARG_ENABLE(libflac,      [  --enable-libflac        enable usage of libFLAC 1.0.x if present [default=yes]],,enable_libflac=yes)
AC_ARG_ENABLE(libvorbis,    [  --enable-libvorbis      enable usage of libvorbis if present [default=yes]],,enable_libvorbis=yes)
AC_ARG_ENABLE(libmp3lame,   [  --enable-libmp3lame     enable usage of libmp3lame if present [default=yes]],,enable_libmp3lame=yes)
AC_ARG_ENABLE(ms-bitfields, [  --enable-ms-bitfields   enable usage of gcc -mms-bitfields on MinGW [default=yes]],,enable_ms_bitfields=yes)
AC_ARG_WITH(ui,             [  --with-ui=UI            use User Interface UI (gtk or sdl) [default=auto]],,with_ui=auto)
AC_ARG_WITH(debug_level,    [  --with-debug-level=L    set debug level to L (0..3) [default=1]])

dnl ---------------------
dnl  set package version
dnl ---------------------

source VERSION

AC_DEFINE_UNQUOTED(KCEMU_MAJOR_VERSION, $KCEMU_MAJOR_VERSION, "KCemu major version")
AC_DEFINE_UNQUOTED(KCEMU_MINOR_VERSION, $KCEMU_MINOR_VERSION, "KCemu minor version")
AC_DEFINE_UNQUOTED(KCEMU_MICRO_VERSION, $KCEMU_MICRO_VERSION, "KCemu micro version")
AC_DEFINE_UNQUOTED(KCEMU_EXTRA_VERSION, $KCEMU_EXTRA_VERSION, "KCemu extra version")
AC_DEFINE_UNQUOTED(KCEMU_EXTRA_VERSION_TEXT, "$KCEMU_EXTRA_VERSION_TEXT", "KCemu extra version text")
AC_DEFINE_UNQUOTED(KCEMU_VERSION, "$KCEMU_VERSION", "KCemu version")

VERSION=$KCEMU_VERSION

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_SUBST(KCEMU_MAJOR_VERSION)
AC_SUBST(KCEMU_MINOR_VERSION)
AC_SUBST(KCEMU_MICRO_VERSION)
AC_SUBST(KCEMU_EXTRA_VERSION)
AC_SUBST(KCEMU_EXTRA_VERSION_TEXT)
AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE", "package name")
AC_DEFINE_UNQUOTED(VERSION, "$VERSION", "package version")

dnl ---------------------
dnl  initialize automake
dnl ---------------------

AM_CONFIG_HEADER(include/kc/config.h)
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

dnl -------------------
dnl  configure gettext
dnl -------------------

ALL_LINGUAS="en de"
AM_PO_SUBDIRS
AM_GNU_GETTEXT([no-libtool])
if test "x$USE_INCLUDED_LIBINTL" = "xyes"; then
	AC_DEFINE(USE_INCLUDED_LIBINTL, 1, "use included libintl")
fi

dnl ---------------------
dnl  checks for programs
dnl ---------------------

AC_PROG_CC

if test x$enable_ms_bitfields = xyes; then
	dnl
	dnl  check for compiler-flag -mms-bitfields needed for mingw/cygwin
	dnl  it defines the bit-field layout to be MS Visual C/C++ compatible
	dnl
	ac_save_CFLAGS=$CFLAGS
	CFLAGS="-mms-bitfields"
	AC_CACHE_CHECK(whether $CC accepts $CFLAGS, ac_cv_prog_cc_mms_bitfields,
		  [AC_COMPILE_IFELSE([AC_LANG_PROGRAM()], [ac_cv_prog_cc_mms_bitfields=yes],
	                                                  [ac_cv_prog_cc_mms_bitfields=no])])
	if test $ac_cv_prog_cc_mms_bitfields = yes; then
		use_ms_bitfields="$CFLAGS"
	else
		use_ms_bitfields="$CFLAGS"
	fi
	CFLAGS="$ac_save_CFLAGS"
fi

AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB
AC_CHECK_TOOL(RC, windres, :)

AC_PROG_MAKE_SET

dnl -------------------
dnl  check debug level
dnl -------------------

AC_MSG_CHECKING(which debug level is requested)
DBG_LEVEL=1
if test "x$with_debug_level" = "x0"; then
  DBG_LEVEL=0
elif test "x$with_debug_level" = "x1"; then
  DBG_LEVEL=1
elif test "x$with_debug_level" = "x2"; then
  DBG_LEVEL=2
elif test "x$with_debug_level" = "x3"; then
  DBG_LEVEL=3
fi
AC_MSG_RESULT($DBG_LEVEL)
AC_DEFINE_UNQUOTED(DBG_LEVEL, $DBG_LEVEL, "debug level")

dnl ----------------------------
dnl  check for arnold assembler
dnl ----------------------------

AC_CHECK_PROG(HAVE_ASL, asl, "yes", "no")
AC_CHECK_PROG(HAVE_P2BIN, p2bin, "yes", "no")

AM_CONDITIONAL(COMPILE_Z80_ASM, false)
if test "x$HAVE_ASL" = "xyes"; then
  if test "x$HAVE_P2BIN" = "xyes"; then
    AM_CONDITIONAL(COMPILE_Z80_ASM, true)
  fi
fi
    
dnl -----------------------------------
dnl  check on which system we will run
dnl -----------------------------------

AM_CONDITIONAL(TARGET_BEOS,  false)
AM_CONDITIONAL(TARGET_MINGW, false)
AM_CONDITIONAL(TARGET_LINUX, false)

case "$host_os" in
	beos)
		HOST_OS="BeOS"
		HOST_OS_BEOS=1
		AM_CONDITIONAL(TARGET_BEOS, true)
		AC_DEFINE_UNQUOTED(HOST_OS_BEOS, $HOST_OS_BEOS, "host os is BeOS")
		;;
		
	mingw32*)
		HOST_OS="MinGW"
		HOST_OS_MINGW=1
		AM_CONDITIONAL(TARGET_MINGW, true)
		AC_DEFINE_UNQUOTED(HOST_OS_MINGW, $HOST_OS_MINGW, "host os is MinGW")
		CFLAGS="$CFLAGS $use_ms_bitfields"
		CXXFLAGS="$CXXFLAGS $use_ms_bitfields"
		LDFLAGS="$LDFLAGS $use_ms_bitfields -mwindows"
		;;

	*)
		HOST_OS="Linux"
		HOST_OS_LINUX=1
		AM_CONDITIONAL(TARGET_LINUX, true)
		AC_DEFINE_UNQUOTED(HOST_OS_LINUX, $HOST_OS_LINUX, "host os is Linux")
		;;
esac

AC_DEFINE_UNQUOTED(HOST_OS, "$HOST_OS", "host os")

dnl ---------------------------------------------------------------
dnl  checks for typedefs, structures, and compiler characteristics
dnl ---------------------------------------------------------------

AC_C_CONST
AC_C_INLINE
AC_HEADER_TIME

dnl -------------------------------
dnl  check for common header files
dnl -------------------------------

AC_PATH_X
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/time.h mcheck.h)

dnl ----------------------------------
dnl  check for common C++ header files
dnl ----------------------------------

AC_LANG_PUSH(C++)
AC_LANG_POP(C++)

dnl --------------------------------------
dnl  checks for various library functions
dnl --------------------------------------
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(gettimeofday strstr strchr strrchr strtol strcasecmp strncasecmp mtrace)
AC_CHECK_FUNC(localtime_r, AC_DEFINE(HAVE_LOCALTIME_R, 1, "localtime_r"))
AC_CHECK_FUNC(localtime, AC_DEFINE(HAVE_LOCALTIME, 1, "localtime"))
AC_CHECK_FUNC(getopt,
	      have_getopt=yes
	      AC_DEFINE(HAVE_GETOPT, 1, "getopt() available"))
AC_CHECK_FUNC(getopt_long,
	      have_getopt_long=yes
	      AC_DEFINE(HAVE_GETOPT_LONG, 1, "getopt_long() available"))

AC_MSG_CHECKING(whether to use the included getopt library)
if test x$have_getopt = xyes -o x$have_getopt_long = xyes; then
	use_included_getopt=no
	AM_CONDITIONAL(USE_INCLUDED_GETOPT, false)
else
	use_included_getopt=yes
	AM_CONDITIONAL(USE_INCLUDED_GETOPT, true)
	AC_DEFINE(USE_INCLUDED_GETOPT, 1, "use included getopt")
        AC_DEFINE(HAVE_GETOPT, 1, "getopt() available")
        AC_DEFINE(HAVE_GETOPT_LONG, 1, "getopt_long() available")
fi
AC_MSG_RESULT($use_included_getopt)

dnl -----------------------------
dnl  check for common libraries
dnl -----------------------------
dnl
dnl  on mingw the libz dll has to be linked
dnl  with -lzdll instead of -lz
dnl
AC_CHECK_LIB(z, crc32, have_libz=-lz, have_libz=no)
if test x$have_libz = xno; then
   AC_CHECK_LIB(zdll, crc32, have_libz=-lzdll, have_libz=no)
fi
if test x$have_libz = xno; then
   AC_MSG_ERROR(Cannot link libz -- check CFLAGS/LDFLAGS)
else
   LIBS="$LIBS $have_libz"
fi

AC_CHECK_LIB(m, pow,,AC_MSG_WARN(Cannot link libm -- check CFLAGS/LDFLAGS))

dnl -----------------------
dnl  initialize pkg-config
dnl -----------------------
PKG_PROG_PKG_CONFIG(0.20)

dnl ---------------------------------
dnl  check for glade runtime library
dnl ---------------------------------
PKG_CHECK_MODULES(LIBGLADE, libglade-2.0 >= 2.6.0)
AC_SUBST(LIBGLADE_CFLAGS)
AC_SUBST(LIBGLADE_LIBS)

dnl ---------------------
dnl  check for libsndfile
dnl ---------------------

if test x$enable_libsndfile = xyes; then
	AC_CHECK_LIB(sndfile,
		     sf_open_read,
		     have_libsndfile=yes,
		     have_libsndfile=no)
	if test x$have_libsndfile = xyes; then
		SNDFILE_LIBS=-lsndfile
		AC_SUBST(SNDFILE_LIBS)
		AC_DEFINE(HAVE_LIBSNDFILE, 1, "have libsndfile")
		AC_DEFINE(HAVE_LIBSNDFILE_V0, 1, "have libsndfile version 0.0.x")
	else
		AC_CHECK_LIB(sndfile,
			     sf_open,
			     have_libsndfile=yes,
			     have_libsndfile=no)
		if test x$have_libsndfile = xyes; then
			SNDFILE_LIBS=-lsndfile
			AC_SUBST(SNDFILE_LIBS)
			AC_DEFINE(HAVE_LIBSNDFILE, 1, "have libsndfile")
			AC_DEFINE(HAVE_LIBSNDFILE_V1, 1, "have libnsndfile version 1.0.x")
		else
			AC_MSG_WARN([
***
*** Unable to find sndfile library! The audio loader module which
*** requires this library will be disabled.
***
*** This is NO ERROR. It only means you can't playback certain
*** audio file types (e.g. .WAV, .PCM, .AU, .SND) in the emulated
*** tape recorder.
***
*** If you are still annoyed by this warning you can tell ./configure
*** not to check for this library by using --disable-libsndfile
***])
		fi
	fi
fi

dnl -----------------------
dnl  check for libaudiofile
dnl -----------------------

if test x$enable_libaudiofile = xyes; then
	AC_CHECK_LIB(audiofile, afOpenFile, have_libaudiofile=yes, have_libaudiofile=no)
	if test x$have_libaudiofile = xyes; then
		AUDIOFILE_LIBS=-laudiofile
		AC_SUBST(AUDIOFILE_LIBS)
		AC_DEFINE(HAVE_LIBAUDIOFILE, 1, "have libaudiofile")
	else
		AC_MSG_WARN([
***
*** Unable to find audiofile library! The audio loader module which
*** requires this library will be disabled.
***
*** This is NO ERROR. It only means you can't playback certain
*** audio file types (e.g. .WAV, .AIFF, .AU) in the emulated
*** tape recorder.
***
*** If you are still annoyed by this warning you can tell ./configure
*** not to check for this library by using --disable-libaudiofile
***])
	fi
fi

dnl ---------------------
dnl  check for libmp3lame
dnl ---------------------

if test x$enable_libmp3lame = xyes; then
	AC_CHECK_LIB(mp3lame, lame_decode1_headers, have_libmp3lame=yes, have_libmp3lame=no)
	if test x$have_libmp3lame = xyes; then
		MP3LAME_LIBS=-lmp3lame
		AC_SUBST(MP3LAME_LIBS)
		AC_DEFINE(HAVE_LIBMP3LAME, 1, "have libmp3lame")
	else
		AC_MSG_WARN([
***
*** Unable to find libmp3lame (part of MP3 encoder LAME)! The audio
*** loader module which requires this library will be disabled.
***
*** This is NO ERROR. It only means you can't playback certain
*** audio file types (e.g. .MP3) in the emulated tape recorder.
***
*** If you are still annoyed by this warning you can tell ./configure
*** not to check for this library by using --disable-libmp3lame
***])
	fi
fi

dnl --------------------
dnl  check for libvorbis
dnl --------------------

if test x$enable_libvorbis = xyes; then
	AC_CHECK_LIB(vorbisfile, ov_open, have_libvorbis=yes, have_libvorbis=no, -lvorbis)
	if test x$have_libvorbis = xyes; then
		VORBIS_LIBS="-lvorbisfile -lvorbis"
		AC_SUBST(VORBIS_LIBS)
		AC_DEFINE(HAVE_LIBVORBIS, 1, "have libvorbis")
	else
		AC_MSG_WARN([
***
*** Unable to find libvorbis library! The audio loader module which
*** requires this library will be disabled.
***
*** This is NO ERROR. It only means you can't playback certain
*** audio file types (e.g. .OGG) in the emulated tape recorder.
***
*** If you are still annoyed by this warning you can tell ./configure
*** not to check for this library by using --disable-libvorbis
***])
	fi
fi

dnl ------------------
dnl  check for libflac
dnl ------------------

if test x$enable_libflac = xyes; then
	AC_CHECK_LIB(FLAC, FLAC__file_decoder_process_metadata, have_libflac=yes, have_libflac=no)
	if test x$have_libflac = xyes; then
		F_L_A_C_LIBS=-lFLAC
		AC_SUBST(F_L_A_C_LIBS)
		AC_DEFINE(HAVE_LIBFLAC, 1, "have libFLAC")
	else
		AC_MSG_WARN([
***
*** Unable to find libFLAC library! The audio loader module which
*** requires this library will be disabled.
***
*** Currently only libFLAC 1.0.x is supported!
***
*** This is NO ERROR. It only means you can't playback certain
*** audio file types (e.g. .FLAC) in the emulated tape recorder.
***
*** If you are still annoyed by this warning you can tell ./configure
*** not to check for this library by using --disable-libflac
***])
	fi
fi

dnl -------------------------------------
dnl  check for system specific libraries
dnl -------------------------------------

if test x"$HOST_OS" = "xLinux" -o x"$HOST_OS" = "xMinGW"; then
	dnl --------------
	dnl  check for OSS
	dnl --------------

	AC_CHECK_HEADERS(sys/soundcard.h)
	AC_CHECK_HEADERS(machine/soundcard.h)
	if test x$ac_cv_header_sys_soundcard_h = xyes -o x$ac_cv_header_machine_soundcard_h = xyes; then
		AC_DEFINE(HAVE_OSS, 1, "have oss")
	else
		AC_MSG_WARN([
***
*** Unable to find OSS header file soundcard.h! The audio loader
*** module which requires OSS will be disabled.
***
*** This is NO ERROR. It only means you can't directly load programs
*** by reading directly from the soundcard line input.
***])
	fi

	dnl ------------------
	dnl  check for libgtk
	dnl ------------------

	if ! test "x$enable_gtktest" = "xno" ; then
		AM_PATH_GTK_2_0(2.12.0, have_libgtk=yes, have_libgtk=no)
	else
		have_libgtk=yes
		gtk_config_major_version=?
		gtk_config_minor_version=?
		gtk_config_micro_version=?
		AC_MSG_CHECKING([for GTK library])
		AC_MSG_RESULT([gtk-check disabled, using only GTK_CFLAGS/GTK_LIBS environment variables])
		AC_SUBST(GTK_CFLAGS, $GTK_CFLAGS)
		AC_SUBST(GTK_LIBS, $GTK_LIBS)
	fi

	if test x$have_libgtk = xyes; then
		AC_DEFINE(HAVE_LIBGTK, 1, "have libgtk")
	fi

	dnl --------------------------------------
	dnl  check for libSDL if sound is enabled
	dnl --------------------------------------

	AM_PATH_SDL(1.2.0, have_libsdl=yes, have_libsdl=no)

	if test x$have_libsdl = xyes; then
		AC_DEFINE(HAVE_LIBSDL, 1, "have libSDL")
	else
		if test x$enable_sound = xyes; then
			AC_MSG_WARN([
***
*** Unable to find SDL library (see http://www.libsdl.org/)
*** Sound is disabled!
***])
			enable_sound=no
		fi
	fi

	if test x$enable_sound = xyes; then
		AC_DEFINE(ENABLE_SOUND, 1, "enable sound")
	fi

	dnl -----------------------------------
	dnl  check which user interface to use
	dnl -----------------------------------

	AC_MSG_CHECKING(which user interface to use)
	if test x$have_libgtk = xyes -a \( "x$with_ui" = "xgtk" -o "x$with_ui" = "xauto" \); then
		use_ui="GTK - The GIMP Toolkit"
		AC_DEFINE(USE_UI_GTK, 1, "use UI GTK")
		AM_CONDITIONAL(TARGET_UI_GTK, true)
		AM_CONDITIONAL(TARGET_UI_SDL, false)
	elif test x$have_libsdl = xyes -a \( "x$with_ui" = "xsdl" -o "x$with_ui" = "xauto" \); then
		use_ui="SDL - Simple DirectMedia Layer"
		AC_DEFINE(USE_UI_SDL, 1, "use UI SDL")
		AM_CONDITIONAL(TARGET_UI_GTK, false)
		AM_CONDITIONAL(TARGET_UI_SDL, true)
	else
		if test "x$with_ui" = "xauto"; then
			AC_MSG_ERROR([
***
*** Couldn't find any user interface library! Currently it's
*** possible to use GTK (www.gtk.org) or libSDL (www.libsdl.org).
***])
		else
			AC_MSG_ERROR([
***
*** Specified user interface library is not valid: '$with_ui'.
*** Please use --with-ui=gtk or --with-ui=sdl.
***])
		fi
	fi
	AC_DEFINE_UNQUOTED(USE_UI, "$use_ui", "user interface")
	AC_MSG_RESULT($use_ui)
fi

AC_OUTPUT([
	Makefile
	include/Makefile
	include/kc/Makefile
	include/kc/prefs/Makefile
	include/kc/kcnet/Makefile
	include/kc/kramermc/Makefile
	include/kc/muglerpc/Makefile
	include/kc/vcs80/Makefile
	include/kc/c80/Makefile
	include/sys/Makefile
	include/getopt/Makefile
	include/cmd/Makefile
	include/ui/Makefile
	include/ui/gtk/Makefile
	include/ui/sdl/Makefile
	include/ui/sdlmtk/Makefile
	include/ui/beos/Makefile
	include/ui/generic/Makefile
	include/fileio/Makefile
	include/libdbg/Makefile
	include/libtape/Makefile
	include/libdisk/Makefile
	include/libaudio/Makefile
	include/z80core/Makefile
	include/z80core2/Makefile
	asm/Makefile
	asm/autostart/Makefile
	src/Makefile
	src/kc/kcemu.rc
	src/kc/Makefile
	src/kc/prefs/Makefile
	src/kc/kcnet/Makefile
	src/kc/kramermc/Makefile
	src/kc/muglerpc/Makefile
	src/kc/vcs80/Makefile
	src/kc/c80/Makefile
	src/sys/Makefile
	src/sys/beos/Makefile
	src/sys/mingw/Makefile
	src/sys/linux/Makefile
	src/getopt/Makefile
	src/cmd/Makefile
	src/ui/Makefile
	src/ui/gtk/Makefile
	src/ui/sdl/Makefile
	src/ui/sdlmtk/Makefile
	src/ui/beos/Makefile
	src/ui/generic/Makefile
	src/fileio/Makefile
	src/libdbg/Makefile
	src/libtape/Makefile
	src/libdisk/Makefile
	src/libaudio/Makefile
	src/util/Makefile
	src/z80core/Makefile
	src/z80core2/Makefile
	test/Makefile
	test/kc/Makefile
	test/kc/prefs/Makefile
	test/libaudio/Makefile
	test/libaudio/data/Makefile
	roms/Makefile
	roms/z1013/Makefile
	roms/z9001/Makefile
	roms/kc85/Makefile
	roms/poly880/Makefile
	roms/lc80/Makefile
	roms/a5105/Makefile
	roms/kramermc/Makefile
	roms/muglerpc/Makefile
	roms/vcs80/Makefile
	roms/c80/Makefile
	tapes/Makefile
        disks/Makefile
	images/Makefile
	images/original/Makefile
	doc/Makefile
	doc/kcemu-help.xml
	intl/Makefile
	man/Makefile
	man/man1/Makefile
	debian/Makefile
	rpm/Makefile
	rpm/KCemu.spec
	po/Makefile.in
	glade/Makefile
	glade/about/Makefile
	glade/audio/Makefile
	glade/copying/Makefile
	glade/dialog/Makefile
	glade/disk/Makefile
	glade/help/Makefile
	glade/module/Makefile
	glade/tape/Makefile
	glade/thanks/Makefile
	conf/Makefile
	setup/Makefile
	setup/KCemuSetup.nsi
	setup/KCemuSetup_gtk2.6.nsi
	setup/KCemuSetup_gtk2.8.nsi
	setup/KCemuSetup_gtk2.10.nsi],
	[])


echo ""
echo ""
echo "KCemu summary:"
echo "--------------"
echo ""
echo "- version:         KCemu $KCEMU_VERSION"
echo "- host system:     $host"
echo "- architecture:    $HOST_OS"
echo "- debug level:     $DBG_LEVEL"
echo "- install prefix:  $prefix"
echo "- user interface:  $use_ui"
echo ""
echo -n "- libs:"
comma=""
if test x$have_libgtk = xyes; then
echo -n "$comma Gtk+ ($gtk_config_major_version.$gtk_config_minor_version.$gtk_config_micro_version)"
comma=","
fi
if test x$have_libsdl = xyes; then
echo -n "$comma SDL ($sdl_major_version.$sdl_minor_version.$sdl_micro_version)"
comma=","
fi
if test x$have_libsndfile = xyes; then
echo -n "$comma sndfile"
comma=","
fi
if test x$have_libaudiofile = xyes; then
echo -n "$comma audiofile"
comma=","
fi
if test x$have_libvorbis = xyes; then
echo -n "$comma vorbis"
comma=","
fi
if test x$have_libmp3lame = xyes; then
echo -n "$comma mp3lame"
comma=","
fi
if test x$have_libflac = xyes; then
echo -n "$comma FLAC"
comma=","
fi
echo ""
echo ""
echo "- optional components:"
echo -n "  * sound:           "
if test x$enable_sound = xyes; then
	echo "yes"
else
	echo "no"
fi
echo ""
